/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
            // 先反转链表，再两数相加
            l1 = reverseList(l1);
            l2 = reverseList(l2);

            ListNode preAns = new ListNode();
            // 个位
            Integer i = 0;
            // 进位
            Integer j = 0;
            while (l1 != null && l2 != null) {
                i = (l1.val + l2.val + j) % 10;
                j = (l1.val + l2.val + j) / 10;
                ListNode node = new ListNode(i, preAns.next);
                preAns.next = node;
                l1 = l1.next;
                l2 = l2.next;
            }
            while (l1 != null) {
                i = (l1.val + j) % 10;
                j = (l1.val + j) / 10;
                ListNode node = new ListNode (i, preAns.next);
                preAns.next = node;
                l1 = l1.next;
            }
            while (l2 != null) {
                i = (l2.val + j) % 10;
                j = (l2.val + j) / 10;
                ListNode node = new ListNode(i, preAns.next);
                preAns.next = node;
                l2 = l2.next;
            }
            if (j != 0) {
                ListNode node = new ListNode(j, preAns.next);
                preAns.next = node;
            }
            return preAns.next;

    }

    public ListNode reverseList(ListNode l) {
        if (l == null || l.next == null) {
            return l;
        }
        // 反转链表，首元节点不会被删除或改变位置，因此不需要头节点辅助
        ListNode pre = null;
        ListNode next = l.next;
        ListNode curr = l;
        while(curr != null) {
            next = curr.next;
            curr.next = pre;
            pre = curr;
            curr = next;
        }
        return pre;

    }
}